/*
T√°c gi·∫£ Script: Yui Chy
*/

if (typeof $request !== 'undefined' && $request) {
    let url = $request.url;

    const keyPattern = /^https:\/\/testflight\.apple\.com\/v3\/accounts\/(.+?)\/apps$/;
    const joinPattern = /^https:\/\/testflight\.apple\.com\/join\/([A-Za-z0-9]+)$/;
    const ruPattern = /v3\/accounts\/.*\/ru\/(.*)/;

    if (keyPattern.test(url)) {
        // X·ª≠ l√Ω khi request URL kh·ªõp v·ªõi keyPattern
        let key = url.match(keyPattern)[1];

        // L∆∞u c√°c th√¥ng tin v√†o persistent store
        let headers = Object.fromEntries(Object.entries($request.headers).map(([key, value]) => [key.toLowerCase(), value]));
        $persistentStore.write(headers['x-session-id'], 'session_id');
        $persistentStore.write(headers['x-session-digest'], 'session_digest');
        $persistentStore.write(headers['x-request-id'], 'request_id');
        $persistentStore.write(key, 'key');

        // Th√¥ng b√°o th√†nh c√¥ng n·∫øu ch∆∞a c√≥ APP_ID
        let existingAppIds = $persistentStore.read('APP_ID');
        if (!existingAppIds) {
            $notification.post('L·∫•y th√¥ng tin th√†nh c√¥ng üéâ', '', 'Vui l√≤ng l·∫•y APP_ID tr∆∞·ªõc khi ch·ªânh s·ª≠a tham s·ªë module ƒë·ªÉ ng·ª´ng vi·ªác ch·∫°y script n√†y', {"auto-dismiss": 10});
        }
        console.log(`L·∫•y th√¥ng tin th√†nh c√¥ng: session_id=${headers['x-session-id']}, session_digest=${headers['x-session-digest']}, request_id=${headers['x-request-id']}, key=${key}`);
    } else if (joinPattern.test(url)) {
        // X·ª≠ l√Ω khi request URL kh·ªõp v·ªõi joinPattern
        const id = url.match(joinPattern)[1];
        handler(id);
    } else if (ruPattern.test(url)) {
        // X·ª≠ l√Ω khi request URL kh·ªõp v·ªõi ruPattern
        const id = url.match(ruPattern)[1];
        handler(id);
    }

    $done({});
} else {
    // X·ª≠ l√Ω khi kh√¥ng c√≥ $request (ch·∫°y b·∫•t ƒë·ªìng b·ªô)
    (async () => {
        let ids = $persistentStore.read('APP_ID');
        if (!ids) {
            console.log('Kh√¥ng t√¨m th·∫•y APP_ID');
            $done();
        } else {
            ids = ids.split(',');
            for (const ID of ids) {
                await autoPost(ID, ids);
            }
            if (ids.length === 0) {
                $notification.post('T·∫•t c·∫£ TestFlight ƒë√£ tham gia üéâ', '', 'Module ƒë√£ t·ª± ƒë·ªông ƒë√≥ng l·∫°i', {"sound": true});
                $done($httpAPI('POST', '/v1/modules', {'Public Monitoring': false}));
            } else {
                $done();
            }
        }
    })();
}

async function handler(appId) {
    let existingAppIds = $persistentStore.read('APP_ID');
    let appIdSet = new Set(existingAppIds ? existingAppIds.split(',') : []);
    
    if (!appIdSet.has(appId)) {
        appIdSet.add(appId);
        $persistentStore.write(Array.from(appIdSet).join(','), 'APP_ID');
        $notification.post('ƒê√£ ghi nh·∫≠n APP_ID', '', `ƒê√£ ghi nh·∫≠n v√† l∆∞u tr·ªØ APP_ID: ${appId}`, {"auto-dismiss": 2});
        console.log(`ƒê√£ ghi nh·∫≠n v√† l∆∞u tr·ªØ APP_ID: ${appId}`);
    } else {
        $notification.post('Tr√πng l·∫∑p APP_ID', '', `APP_ID: ${appId} ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn th√™m l·∫°i.`, {"auto-dismiss": 2});
        console.log(`APP_ID: ${appId} ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn th√™m l·∫°i.`);
    }
}

async function autoPost(ID, ids) {
    let key = $persistentStore.read('key');
    let testurl = `https://testflight.apple.com/v3/accounts/${key}/ru/${ID}`;
    let headers = {
        'X-Session-Id': $persistentStore.read('session_id'),
        'X-Session-Digest': $persistentStore.read('session_digest'),
        'X-Request-Id': $persistentStore.read('request_id')
    };

    $httpClient.get({ url: testurl, headers: headers }, (error, response, data) => {
        if (error) {
            console.log(`${ID} Y√™u c·∫ßu m·∫°ng th·∫•t b·∫°i: ${error}Ôºågi·ªØ l·∫°i APP_ID`);
            return;
        }

        if (response.status !== 200) {
            console.log(`${ID} Kh√¥ng ph·∫£i li√™n k·∫øt h·ª£p l·ªá: m√£ tr·∫°ng th√°i ${response.status}Ôºåx√≥a b·ªè APP_ID`);
            ids.splice(ids.indexOf(ID), 1);
            $persistentStore.write(ids.join(','), 'APP_ID');
            $notification.post('Kh√¥ng ph·∫£i li√™n k·∫øt TestFlight h·ª£p l·ªá', '', `${ID} ƒë√£ b·ªã x√≥a b·ªè`, {"auto-dismiss": 2});
            return;
        }

        let jsonData;
        try {
            jsonData = JSON.parse(data);
        } catch (parseError) {
            console.log(`${ID} L·ªói ph√¢n t√≠ch c√∫ ph√°p ph·∫£n h·ªìi: ${parseError}Ôºågi·ªØ l·∫°i APP_ID`);
            return;
        }

        if (!jsonData || !jsonData.data) {
            console.log(`${ID} Kh√¥ng th·ªÉ ch·∫•p nh·∫≠n l·ªùi m·ªùi, gi·ªØ l·∫°i APP_ID`);
            return;
        }

        if (jsonData.data.status === 'FULL') {
            console.log(`${ID} ƒê√£ ƒë·∫ßy th·ª≠ nghi·ªám, gi·ªØ l·∫°i APP_ID`);
            return;
        }

        $httpClient.post({ url: `${testurl}/accept`, headers: headers }, (error, response, body) => {
            if (!error && response.status === 200) {
                let jsonBody;
                try {
                    jsonBody = JSON.parse(body);
                } catch (parseError) {
                    console.log(`${ID} Y√™u c·∫ßu tham gia ph·∫£n h·ªìi ph√¢n t√≠ch c√∫ ph√°p l·ªói: ${parseError}Ôºågi·ªØ l·∫°i APP_ID`);
                    return;
                }

                console.log(`${jsonBody.data.name} ƒê√£ tham gia TestFlight th√†nh c√¥ng`);
                ids.splice(ids.indexOf(ID), 1);
                $persistentStore.write(ids.join(','), 'APP_ID');
                if (ids.length > 0) {
                    $notification.post(`${jsonBody.data.name} ƒê√£ tham gia TestFlight th√†nh c√¥ng`, '', `Ti·∫øp t·ª•c v·ªõi APP ID: ${ids.join(',')}`, {"sound": true});
                } else {
                    $notification.post(`${jsonBody.data.name} ƒê√£ tham gia TestFlight th√†nh c√¥ng`, '', 'ƒê√£ x·ª≠ l√Ω t·∫•t c·∫£ APP ID', {"sound": true});
                }
            } else {
                console.log(`${ID} Tham gia kh√¥ng th√†nh c√¥ng: ${error || `M√£ tr·∫°ng th√°i ${response.status}`}Ôºågi·ªØ l·∫°i APP_ID`);
            }
        });
    });
}
