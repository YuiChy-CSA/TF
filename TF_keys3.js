/*
Admin: YuiChy
*/

if ($request) {
    let url = $request.url;

    let keyPattern = /^https:\/\/testflight\.apple\.com\/v3\/accounts\/(.*?)\/apps/;
    let key = url.match(keyPattern) ? url.match(keyPattern)[1] : null;

    const handler = (appIdMatch) => {
        if (appIdMatch && appIdMatch[1]) {
            let appId = appIdMatch[1];
            let existingAppIds = $persistentStore.read('APP_ID');
            let appIdSet = new Set(existingAppIds ? existingAppIds.split(',') : []);
            if (!appIdSet.has(appId)) {
                appIdSet.add(appId);
                $persistentStore.write(Array.from(appIdSet).join(','), 'APP_ID');
                $notification.post('ƒê√£ l∆∞u APP_ID', '', `ƒê√£ l∆∞u tr·ªØ APP_ID: ${appId}`, {"sound": "default"});
                console.log(`ƒê√£ l∆∞u tr·ªØ APP_ID: ${appId}`);
            } else {
                $notification.post('APP_ID ƒë√£ t·ªìn t·∫°i', '', `APP_ID: ${appId} ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn th√™m l·∫°i.`, {"sound": "default"});
                console.log(`APP_ID: ${appId} ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn th√™m l·∫°i.`);
            }
        } else {
            console.log('Kh√¥ng t√¨m th·∫•y TestFlight APP_ID h·ª£p l·ªá');
        }
    };

    if (/^https:\/\/testflight\.apple\.com\/v3\/accounts\/.*\/apps$/.test(url) && key) {
        let headers = $request.headers;
        let session_id = headers['X-Session-Id'];
        let session_digest = headers['X-Session-Digest'];
        let request_id = headers['X-Request-Id'];

        if (session_id && session_digest && request_id) {
            $persistentStore.write(session_id, 'session_id');
            $persistentStore.write(session_digest, 'session_digest');
            $persistentStore.write(request_id, 'request_id');
            $persistentStore.write(key, 'key');

            let existingAppIds = $persistentStore.read('APP_ID');
            if (!existingAppIds) {
                $notification.post('Th√¥ng tin l·∫•y th√†nh c√¥ng üéâ', '', 'Vui l√≤ng l·∫•y APP_ID ƒë·ªÉ ch·ªânh s·ª≠a tham s·ªë m√¥-ƒëun v√† t·∫Øt script n√†y', {"sound": "default"});
            }
            console.log(`Th√¥ng tin l·∫•y th√†nh c√¥ng: session_id=${session_id}, session_digest=${session_digest}, request_id=${request_id}, key=${key}`);
        } else {
            console.log('Th√¥ng tin kh√¥ng h·ª£p l·ªá t·ª´ y√™u c·∫ßu');
        }
    } else if (/^https:\/\/testflight\.apple\.com\/join\/([A-Za-z0-9]+)$/.test(url)) {
        const appIdMatch = url.match(/^https:\/\/testflight\.apple\.com\/join\/([A-Za-z0-9]+)$/);
        handler(appIdMatch);
    } else if (/v3\/accounts\/.*\/ru/.test(url)) {
        const appIdMatch = url.match(/v3\/accounts\/.*\/ru\/(.*)/);
        handler(appIdMatch);
    }

    $done({});
} else {
    let ids = $persistentStore.read('APP_ID');
    if (!ids) {
        console.log('Kh√¥ng t√¨m th·∫•y APP_ID');
        $done();
    } else {
        ids = ids.split(',');
        (async () => {
            for (const ID of ids) {
                await autoPost(ID, ids);
            }
            if (ids.length === 0) {
                $notification.post('T·∫•t c·∫£ TestFlight ƒë√£ ƒë∆∞·ª£c th√™m üéâ', '', 'M√¥-ƒëun ƒë√£ t·ª± ƒë·ªông t·∫Øt', {"sound": "default"});
                $done($http.post('http://localhost:6171/v1/modules', {'Gi√°m s√°t th·ª≠ nghi·ªám c√¥ng c·ªông': false}));
            } else {
                $done();
            }
        })();
    }
}

async function autoPost(ID, ids) {
    let Key = $persistentStore.read('key');
    let testurl = `https://testflight.apple.com/v3/accounts/${Key}/ru/`;
    let header = {
        'X-Session-Id': $persistentStore.read('session_id'),
        'X-Session-Digest': $persistentStore.read('session_digest'),
        'X-Request-Id': $persistentStore.read('request_id')
    };

    try {
        const response = await $httpClient.get({ url: testurl + ID, headers: header });
        const data = response.data;
        
        if (!data) {
            console.log(`${ID} Kh√¥ng th·ªÉ ch·∫•p nh·∫≠n l·ªùi m·ªùi, gi·ªØ l·∫°i APP_ID`);
            return;
        }

        if (data.status === 'FULL') {
            console.log(`${ID} Th·ª≠ nghi·ªám ƒë√£ ƒë·∫ßy, gi·ªØ l·∫°i APP_ID`);
            return;
        }

        const acceptResponse = await $httpClient.post({ url: testurl + ID + '/accept', headers: header });
        const acceptData = acceptResponse.data;

        if (acceptData) {
            console.log(`${acceptData.data.name} Tham gia TestFlight th√†nh c√¥ng`);
            $notify(acceptData.data.name, "Tham gia TestFlight th√†nh c√¥ng", "");
        }

        ids.splice(ids.indexOf(ID), 1);
        $persistentStore.write(ids.join(','), 'APP_ID');
        if (ids.length > 0) {
            $notification.post(`${acceptData.data.name} Tham gia TestFlight th√†nh c√¥ng`, '', `Ti·∫øp t·ª•c x·ª≠ l√Ω APP ID: ${ids.join(',')}`, {"sound": "default"});
        } else {
            $notification.post(`${acceptData.data.name} Tham gia TestFlight th√†nh c√¥ng`, '', 'ƒê√£ x·ª≠ l√Ω t·∫•t c·∫£ APP ID', {"sound": "default"});
        }
    } catch (error) {
        console.log(`${ID} L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω: ${error}`);
    }
}