/*
Admin: YuiChy
*/

if (typeof $request !== 'undefined' && $request) {
    let url = $request.url

    // X√°c ƒë·ªãnh v√† tr√≠ch xu·∫•t key t·ª´ URL
    let keyPattern = /^https:\/\/testflight\.apple\.com\/v3\/accounts\/(.*?)\/apps/
    let key = url.match(keyPattern) ? url.match(keyPattern)[1] : null

    // H√†m x·ª≠ l√Ω khi c√≥ t√¨m th·∫•y appId t·ª´ URL
    const handler = (appIdMatch) => {
        if (appIdMatch && appIdMatch[1]) {
            let appId = appIdMatch[1]

            // ƒê·ªçc danh s√°ch c√°c appId ƒë√£ l∆∞u
            let existingAppIds = $persistentStore.read('APP_ID')
            let appIdSet = new Set(existingAppIds ? existingAppIds.split(',') : [])

            // Ki·ªÉm tra xem appId ƒë√£ t·ªìn t·∫°i ch∆∞a, n·∫øu ch∆∞a th√¨ th√™m v√†o danh s√°ch v√† l∆∞u l·∫°i
            if (!appIdSet.has(appId)) {
                appIdSet.add(appId)
                $persistentStore.write(Array.from(appIdSet).join(','), 'APP_ID')
                $notification.post('ƒê√£ l∆∞u APP_ID', '', `ƒê√£ l∆∞u APP_ID: ${appId}`, {"auto-dismiss": 2})
                console.log(`ƒê√£ l∆∞u APP_ID: ${appId}`)
            } else {
                $notification.post('APP_ID ƒë√£ t·ªìn t·∫°i', '', `APP_ID: ${appId} ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn th√™m l·∫°i.` , {"auto-dismiss": 2})
                console.log(`APP_ID: ${appId} ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn th√™m l·∫°i.`)
            }
        } else {
            console.log('Kh√¥ng t√¨m th·∫•y TestFlight APP_ID h·ª£p l·ªá')
        }
    }

    // X·ª≠ l√Ω khi URL l√† danh s√°ch ·ª©ng d·ª•ng TestFlight
    if (/^https:\/\/testflight\.apple\.com\/v3\/accounts\/.*\/apps$/.test(url) && key) {
        let headers = Object.fromEntries(Object.entries($request.headers).map(([key, value]) => [key.toLowerCase(), value]))
        let session_id = headers['x-session-id']
        let session_digest = headers['x-session-digest']
        let request_id = headers['x-request-id']

        // L∆∞u c√°c th√¥ng tin c·∫ßn thi·∫øt v√†o local storage
        $persistentStore.write(session_id, 'session_id')
        $persistentStore.write(session_digest, 'session_digest')
        $persistentStore.write(request_id, 'request_id')
        $persistentStore.write(key, 'key')

        // Th√¥ng b√°o th√†nh c√¥ng khi l·∫•y ƒë∆∞·ª£c th√¥ng tin
        let existingAppIds = $persistentStore.read('APP_ID')
        if (!existingAppIds) {
            $notification.post('L·∫•y th√¥ng tin th√†nh c√¥ng üéâ', '', 'Vui l√≤ng l·∫•y APP_ID v√† c·∫•u h√¨nh tham s·ªë c·ªßa module sau ƒë√≥ t·∫Øt script n√†y' , {"auto-dismiss": 10})
        }
        console.log(`L·∫•y th√¥ng tin th√†nh c√¥ng: session_id=${session_id}, session_digest=${session_digest}, request_id=${request_id}, key=${key}`)
    } else if (/^https:\/\/testflight\.apple\.com\/join\/([A-Za-z0-9]+)$/.test(url)) {
        // X·ª≠ l√Ω khi URL l√† link m·ªùi tham gia TestFlight
        const appIdMatch = url.match(/^https:\/\/testflight\.apple\.com\/join\/([A-Za-z0-9]+)$/)
        handler(appIdMatch)
    } else if (/v3\/accounts\/.*\/ru/.test(url)) {
        // X·ª≠ l√Ω khi URL l√† link ch·∫•p nh·∫≠n m·ªùi tham gia TestFlight
        const appIdMatch = url.match(/v3\/accounts\/.*\/ru\/(.*)/)
        handler(appIdMatch)
    }

    $done({})
} else {
    // X·ª≠ l√Ω khi kh√¥ng c√≥ y√™u c·∫ßu $request (ch·∫°y t·ª± ƒë·ªông)
    !(async () => {
        let ids = $persistentStore.read('APP_ID')
        if (!ids) {
            console.log('Kh√¥ng t√¨m th·∫•y APP_ID ƒë√£ l∆∞u')
            $done()
        } else {
            ids = ids.split(',')
            for await (const ID of ids) {
                await autoPost(ID, ids)
            }
            if (ids.length === 0) {
                // Th√¥ng b√°o khi ƒë√£ tham gia h·∫øt c√°c TestFlight
                $notification.post('ƒê√£ tham gia h·∫øt c√°c TestFlight üéâ', '', 'Module ƒë√£ t·ª± ƒë·ªông t·∫Øt sau khi ho√†n th√†nh', {"sound": true});
                $done($httpAPI('POST', '/v1/modules', {'C√¥ng b·ªë th·ª≠ nghi·ªám': false}));
            } else {
                $done()
            }
        }
    })()
}

// H√†m th·ª±c hi·ªán g·ª≠i y√™u c·∫ßu tham gia TestFlight
async function autoPost(ID, ids) {
    let Key = $persistentStore.read('key')
    let testurl = `https://testflight.apple.com/v3/accounts/${Key}/ru/`
    let header = {
        'X-Session-Id': $persistentStore.read('session_id'),
        'X-Session-Digest': $persistentStore.read('session_digest'),
        'X-Request-Id': $persistentStore.read('request_id')
    }

    return new Promise((resolve) => {
        $httpClient.get({ url: testurl + ID, headers: header }, (error, response, data) => {
            if (error) {
                console.log(`${ID} L·ªói m·∫°ng: ${error}ÔºåGi·ªØ l·∫°i APP_ID`);
                resolve();
                return;
            }

            if (response.status === 500) {
                console.log(`${ID} L·ªói server, status code 500ÔºåGi·ªØ l·∫°i APP_ID`);
                resolve();
                return
            }

            if (response.status !== 200) {
                console.log(`${ID} Link kh√¥ng h·ª£p l·ªá: status code ${response.status}ÔºåX√≥a APP_ID`)
                ids.splice(ids.indexOf(ID), 1)
                $persistentStore.write(ids.join(','), 'APP_ID')
                $notification.post('Link TestFlight kh√¥ng h·ª£p l·ªá', '', `${ID} ƒë√£ ƒë∆∞·ª£c x√≥a` , {"auto-dismiss": 2})
                resolve()
                return
            }

            let jsonData
            try {
                jsonData = JSON.parse(data)
            } catch (parseError) {
                console.log(`${ID} L·ªói ph√¢n t√≠ch d·ªØ li·ªáu: ${parseError}ÔºåGi·ªØ l·∫°i APP_ID`)
                resolve()
                return
            }

            if (!jsonData || !jsonData.data) {
                console.log(`${ID} Kh√¥ng th·ªÉ tham gia, Gi·ªØ l·∫°i APP_ID`)
                resolve()
                return
            }

            if (jsonData.data.status === 'FULL') {
                console.log(`${ID} ƒê√£ ƒë·∫ßy, Gi·ªØ l·∫°i APP_ID`)
                resolve()
                return
            }

            // G·ª≠i y√™u c·∫ßu POST ƒë·ªÉ tham gia TestFlight
            $httpClient.post({ url: testurl + ID + '/accept', headers: header }, (error, response, body) => {
                if (!error && response.status === 200) {
                    let jsonBody
                    try {
                        jsonBody = JSON.parse(body)
                    } catch (parseError) {
                        console.log(`${ID} L·ªói ph√¢n t√≠ch d·ªØ li·ªáu ph·∫£n h·ªìi tham gia: ${parseError}ÔºåGi·ªØ l·∫°i APP_ID`)
                        resolve()
                        return
                    }

                    console.log(`${jsonBody.data.name} Tham gia TestFlight th√†nh c√¥ng`)
                    ids.splice(ids.indexOf(ID), 1)
                    $persistentStore.write(ids.join(','), 'APP_ID')
                    if (ids.length > 0) {
                        $notification.post(jsonBody.data.name + ' Tham gia TestFlight th√†nh c√¥ng', '', `Ti·∫øp t·ª•c x·ª≠ l√Ω APP ID: ${ids.join(',')}`, {"sound": true})
                    } else {
                        $notification.post(jsonBody.data.name + ' Tham gia TestFlight th√†nh c√¥ng', '', 'Ho√†n th√†nh t·∫•t c·∫£ c√°c APP ID', {"sound": true})
                    }
                } else {
                    console.log(`${ID} Tham gia th·∫•t b·∫°i: ${error || `status code ${response.status}`}ÔºåGi·ªØ l·∫°i APP_ID`)
                }
                resolve()
            })
        })
    })
}