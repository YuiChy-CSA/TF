/*
T√°c gi·∫£ script: YuiChy
Ngu·ªìn: https://github.com/DecoAri/JavaScript/blob/main/Surge/TF_keys.js
C√°ch s·ª≠ d·ª•ng c·ª• th·ªÉ:
1: Nh·∫≠p plugin v√†o
2: Truy c·∫≠p trang Mitm v√† b·∫≠t Mitm over Http2
3: B·∫≠t VPN, v√†o ·ª©ng d·ª•ng TestFlight, hi·ªÉn th·ªã th√¥ng b√°o l·∫•y th√¥ng tin th√†nh c√¥ng
4: ƒê·∫øn C√†i ƒë·∫∑t -> D·ªØ li·ªáu l∆∞u tr·ªØ -> Nh·∫≠p d·ªØ li·ªáu c·ª• th·ªÉ key ƒëi·ªÅn APP_ID, gi√° tr·ªã ƒëi·ªÅn ID TestFlight b·∫°n mu·ªën tham gia, (ID l√† chu·ªói sau "join" trong li√™n k·∫øt https://testflight.apple.com/join/LPQmtkUs (trong v√≠ d·ª• n√†y l√† "LPQmtkUs") ‚ö†Ô∏è: H·ªó tr·ª£ v√¥ s·ªë li√™n k·∫øt TF, m·ªói li√™n k·∫øt c·∫ßn ph√¢n t√°ch b·∫±ng d·∫•u ph·∫©y ti·∫øng Anh "," (v√≠ d·ª•: LPQmtkUs,Hgun65jg,8yhJgv))

*/

if (typeof $request !== 'undefined' && $request) {
    let url = $request.url

    let keyPattern = /^https:\/\/testflight\.apple\.com\/v3\/accounts\/(.*?)\/apps/
    let key = url.match(keyPattern) ? url.match(keyPattern)[1] : null
    const handler = (appIdMatch) => {
        if (appIdMatch && appIdMatch[1]) {
            let appId = appIdMatch[1]
            let existingAppIds = $persistentStore.read('APP_ID')
            let appIdSet = new Set(existingAppIds ? existingAppIds.split(',') : [])
            if (!appIdSet.has(appId)) {
                appIdSet.add(appId)
                $persistentStore.write(Array.from(appIdSet).join(','), 'APP_ID')
                $notification.post('ƒê√£ b·∫Øt ƒë∆∞·ª£c APP_ID', '', `ƒê√£ b·∫Øt v√† l∆∞u tr·ªØ APP_ID: ${appId}`, {"auto-dismiss": 2})
                console.log(`ƒê√£ b·∫Øt v√† l∆∞u tr·ªØ APP_ID: ${appId}`)
            } else {
                $notification.post('APP_ID tr√πng l·∫∑p', '', `APP_ID: ${appId} ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn th√™m l·∫°i.` , {"auto-dismiss": 2})
                console.log(`APP_ID: ${appId} ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn th√™m l·∫°i.`)
            }
        } else {
            console.log('Kh√¥ng b·∫Øt ƒë∆∞·ª£c APP_ID h·ª£p l·ªá')
        }
    }
    if (/^https:\/\/testflight\.apple\.com\/v3\/accounts\/.*\/apps$/.test(url) && key) {
        let headers = Object.fromEntries(Object.entries($request.headers).map(([key, value]) => [key.toLowerCase(), value]))
        let session_id = headers['x-session-id']
        let session_digest = headers['x-session-digest']
        let request_id = headers['x-request-id']

        $persistentStore.write(session_id, 'session_id')
        $persistentStore.write(session_digest, 'session_digest')
        $persistentStore.write(request_id, 'request_id')
        $persistentStore.write(key, 'key')

        let existingAppIds = $persistentStore.read('APP_ID')
        if (!existingAppIds) {
            $notification.post('Th√¥ng tin thu th·∫≠p th√†nh c√¥ng üéâ', '', 'Vui l√≤ng l·∫•y APP_ID v√† ch·ªânh s·ª≠a c√°c tham s·ªë m√¥-ƒëun ƒë·ªÉ t·∫Øt script n√†y' , {"auto-dismiss": 10})
        }
        console.log(`Th√¥ng tin thu th·∫≠p th√†nh c√¥ng: session_id=${session_id}, session_digest=${session_digest}, request_id=${request_id}, key=${key}`)
    } else if (/^https:\/\/testflight\.apple\.com\/join\/([A-Za-z0-9]+)$/.test(url)) {
        const appIdMatch = url.match(/^https:\/\/testflight\.apple\.com\/join\/([A-Za-z0-9]+)$/)
        handler(appIdMatch)
    } else if (/v3\/accounts\/.*\/ru/.test(url)) {
        const appIdMatch = url.match(/v3\/accounts\/.*\/ru\/(.*)/)
        handler(appIdMatch)
    }

    $done({})
} else {
    !(async () => {
        let ids = $persistentStore.read('APP_ID')
        if (!ids) {
            console.log('Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c APP_ID')
            $done()
        } else {
            ids = ids.split(',')
            for await (const ID of ids) {
                await autoPost(ID, ids)
            }
            if (ids.length === 0) {
                $notification.post('T·∫•t c·∫£ TestFlight ƒë√£ ƒë∆∞·ª£c th√™m üéâ', '', 'M√¥-ƒëun ƒë√£ t·ª± ƒë·ªông t·∫Øt' , {"sound": true});
                $done($httpAPI('POST', '/v1/modules', {'Gi√°m s√°t th·ª≠ nghi·ªám c√¥ng c·ªông': false}));
            } else {
                $done()
            }
        }
    })()
}

async function autoPost(ID, ids) {
    let Key = $persistentStore.read('key')
    let testurl = `https://testflight.apple.com/v3/accounts/${Key}/ru/`
    let header = {
        'X-Session-Id': $persistentStore.read('session_id'),
        'X-Session-Digest': $persistentStore.read('session_digest'),
        'X-Request-Id': $persistentStore.read('request_id')
    }

    return new Promise((resolve) => {
        $httpClient.get({ url: testurl + ID, headers: header }, (error, response, data) => {
            if (error) {
                console.log(`${ID} L·ªói y√™u c·∫ßu m·∫°ng: ${error}Ôºågi·ªØ l·∫°i APP_ID`);
                resolve();
                return;
            }

            if (response.status === 500) {
                console.log(`${ID} L·ªói m√°y ch·ªß, m√£ tr·∫°ng th√°i 500Ôºågi·ªØ l·∫°i APP_ID`);
                resolve();
                return
            }

            if (response.status !== 200) {
                console.log(`${ID} Kh√¥ng ph·∫£i li√™n k·∫øt h·ª£p l·ªá: M√£ tr·∫°ng th√°i ${response.status}Ôºålo·∫°i b·ªè APP_ID`)
                ids.splice(ids.indexOf(ID), 1)
                $persistentStore.write(ids.join(','), 'APP_ID')
                $notification.post('Kh√¥ng ph·∫£i li√™n k·∫øt TestFlight h·ª£p l·ªá', '', `${ID} ƒë√£ b·ªã lo·∫°i b·ªè` , {"auto-dismiss": 2})
                resolve()
                return
            }

            let jsonData
            try {
                jsonData = JSON.parse(data)
            } catch (parseError) {
                console.log(`${ID} L·ªói ph√¢n t√≠ch c√∫ ph√°p ph·∫£n h·ªìi: ${parseError}Ôºågi·ªØ l·∫°i APP_ID`)
                resolve()
                return
            }

            if (!jsonData || !jsonData.data) {
                console.log(`${ID} Kh√¥ng th·ªÉ ch·∫•p nh·∫≠n l·ªùi m·ªùi, gi·ªØ l·∫°i APP_ID`)
                resolve()
                return
            }

            if (jsonData.data.status === 'FULL') {
                console.log(`${ID} Th·ª≠ nghi·ªám ƒë√£ ƒë·∫ßy, gi·ªØ l·∫°i APP_ID`)
                resolve()
                return
            }

            $httpClient.post({ url: testurl + ID + '/accept', headers: header }, (error, response, body) => {
                if (!error && response.status === 200) {
                    let jsonBody
                    try {
                        jsonBody = JSON.parse(body)
                    } catch (parseError) {
                        console.log(`${ID} L·ªói ph√¢n t√≠ch c√∫ ph√°p ph·∫£n h·ªìi y√™u c·∫ßu tham gia: ${parseError}Ôºågi·ªØ l·∫°i APP_ID`)
                        resolve()
                        return
                    }

                    console.log(`${jsonBody.data.name} TestFlight ƒë√£ tham gia th√†nh c√¥ng`)
                    ids.splice(ids.indexOf(ID), 1)
                    $persistentStore.write(ids.join(','), 'APP_ID')
                    if (ids.length > 0) {
                        $notification.post(`${jsonBody.data.name} TestFlight ƒë√£ tham gia th√†nh c√¥ng`, '', `Ti·∫øp t·ª•c th·ª±c hi·ªán APP ID: ${ids.join(',')}`, {"sound": true})
                    } else {
                        $notification.post(`${jsonBody.data.name} TestFlight ƒë√£ tham gia th√†nh c√¥ng`, '', 'ƒê√£ x·ª≠ l√Ω t·∫•t c·∫£ APP ID', {"sound": true})
                    }
                } else {
                    console.log(`${ID} Tham gia kh√¥ng th√†nh c√¥ng: ${error || `M√£ tr·∫°ng th√°i ${response.status}`}Ôºågi·ªØ l·∫°i APP_ID`)
                }
                resolve()
            })
        })
    })
}