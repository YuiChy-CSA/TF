/*
T√°c gi·∫£ script: YuiChy
MOD t·ª´ Quanx
*/

if (typeof $request !== 'undefined' && $request) {
    let url = $request.url;

    const getKeyFromUrl = (url, keyPattern) => {
        const match = url.match(keyPattern);
        return match ? match[1] : null;
    };

    const handleAppId = (appIdMatch) => {
        if (!appIdMatch || !appIdMatch[1]) {
            console.log('Kh√¥ng b·∫Øt ƒë∆∞·ª£c APP_ID h·ª£p l·ªá');
            return;
        }
        
        const appId = appIdMatch[1];
        let existingAppIds = $persistentStore.read('APP_ID') || '';
        let appIdSet = new Set(existingAppIds.split(','));

        if (!appIdSet.has(appId)) {
            appIdSet.add(appId);
            $persistentStore.write(Array.from(appIdSet).join(','), 'APP_ID');
            $notification.post('ƒê√£ b·∫Øt ƒë∆∞·ª£c APP_ID', '', `ƒê√£ b·∫Øt v√† l∆∞u tr·ªØ APP_ID: ${appId}`, {"auto-dismiss": 2});
            console.log(`ƒê√£ b·∫Øt v√† l∆∞u tr·ªØ APP_ID: ${appId}`);
        } else {
            $notification.post('APP_ID tr√πng l·∫∑p', '', `APP_ID: ${appId} ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn th√™m l·∫°i.`, {"auto-dismiss": 2});
            console.log(`APP_ID: ${appId} ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn th√™m l·∫°i.`);
        }
    };

    if (/^https:\/\/testflight\.apple\.com\/v3\/accounts\/.*\/apps$/.test(url)) {
        let keyPattern = /^https:\/\/testflight\.apple\.com\/v3\/accounts\/(.*?)\/apps/;
        let key = getKeyFromUrl(url, keyPattern);
        if (key) {
            const headers = Object.fromEntries(Object.entries($request.headers).map(([key, value]) => [key.toLowerCase(), value]));
            $persistentStore.write(headers['x-session-id'], 'session_id');
            $persistentStore.write(headers['x-session-digest'], 'session_digest');
            $persistentStore.write(headers['x-request-id'], 'request_id');
            $persistentStore.write(key, 'key');
            console.log(`Th√¥ng tin thu th·∫≠p th√†nh c√¥ng: session_id=${headers['x-session-id']}, session_digest=${headers['x-session-digest']}, request_id=${headers['x-request-id']}, key=${key}`);
        }
    } else if (/^https:\/\/testflight\.apple\.com\/join\/([A-Za-z0-9]+)$/.test(url)) {
        handleAppId(url.match(/^https:\/\/testflight\.apple\.com\/join\/([A-Za-z0-9]+)$/));
    } else if (/v3\/accounts\/.*\/ru/.test(url)) {
        handleAppId(url.match(/v3\/accounts\/.*\/ru\/(.*)/));
    }

    $done({});
} else {
    (async () => {
        let ids = $persistentStore.read('APP_ID');
        if (!ids) {
            console.log('Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c APP_ID');
            $done();
            return;
        }

        ids = ids.split(',');
        for (const ID of ids) {
            await autoPost(ID, ids);
        }

        if (ids.length === 0) {
            $notification.post('T·∫•t c·∫£ TestFlight ƒë√£ ƒë∆∞·ª£c th√™m üéâ', '', 'M√¥-ƒëun ƒë√£ t·ª± ƒë·ªông t·∫Øt', {"sound": true});
            $done($httpAPI('POST', '/v1/modules', {'Gi√°m s√°t th·ª≠ nghi·ªám c√¥ng c·ªông': false}));
        } else {
            $done();
        }
    })();
}

async function autoPost(ID, ids) {
    const key = $persistentStore.read('key');
    const header = {
        'X-Session-Id': $persistentStore.read('session_id'),
        'X-Session-Digest': $persistentStore.read('session_digest'),
        'X-Request-Id': $persistentStore.read('request_id')
    };

    const handleError = (ID, message) => {
        console.log(`${ID} ${message}, gi·ªØ l·∫°i APP_ID`);
        return;
    };

    const testUrl = `https://testflight.apple.com/v3/accounts/${key}/ru/`;

    return new Promise((resolve) => {
        $httpClient.get({ url: testUrl + ID, headers: header }, (error, response, data) => {
            if (error) {
                resolve(handleError(ID, `L·ªói y√™u c·∫ßu m·∫°ng: ${error}`));
                return;
            }

            if (response.status === 500) {
                resolve(handleError(ID, 'L·ªói m√°y ch·ªß, m√£ tr·∫°ng th√°i 500'));
                return;
            }

            if (response.status !== 200) {
                ids.splice(ids.indexOf(ID), 1);
                $persistentStore.write(ids.join(','), 'APP_ID');
                $notification.post('Kh√¥ng ph·∫£i li√™n k·∫øt TestFlight h·ª£p l·ªá', '', `${ID} ƒë√£ b·ªã lo·∫°i b·ªè`, {"auto-dismiss": 2});
                resolve();
                return;
            }

            let jsonData;
            try {
                jsonData = JSON.parse(data);
            } catch (parseError) {
                resolve(handleError(ID, `L·ªói ph√¢n t√≠ch c√∫ ph√°p ph·∫£n h·ªìi: ${parseError}`));
                return;
            }

            if (!jsonData || !jsonData.data) {
                resolve(handleError(ID, 'Kh√¥ng th·ªÉ ch·∫•p nh·∫≠n l·ªùi m·ªùi'));
                return;
            }

            if (jsonData.data.status === 'FULL') {
                resolve(handleError(ID, 'Th·ª≠ nghi·ªám ƒë√£ ƒë·∫ßy'));
                return;
            }

            $httpClient.post({ url: testUrl + ID + '/accept', headers: header }, (error, response, body) => {
                if (!error && response.status === 200) {
                    ids.splice(ids.indexOf(ID), 1);
                    $persistentStore.write(ids.join(','), 'APP_ID');
                    const notificationMsg = ids.length > 0 ? `Ti·∫øp t·ª•c th·ª±c hi·ªán APP ID: ${ids.join(',')}` : 'ƒê√£ x·ª≠ l√Ω t·∫•t c·∫£ APP ID';
                    $notification.post(`${jsonData.data.name} TestFlight ƒë√£ tham gia th√†nh c√¥ng`, '', notificationMsg, {"sound": true});
                } else {
                    resolve(handleError(ID, `Tham gia kh√¥ng th√†nh c√¥ng: ${error || `M√£ tr·∫°ng th√°i ${response.status}`}`));
                }
                resolve();
            });
        });
    });
}
